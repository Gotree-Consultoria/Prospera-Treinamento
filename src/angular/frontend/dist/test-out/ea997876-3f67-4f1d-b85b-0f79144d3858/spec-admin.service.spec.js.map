{"version":3,"sources":["node_modules/@angular/common/fesm2022/http/testing.mjs","src/app/core/services/admin.service.spec.ts","src/app/core/services/admin.service.ts"],"sourcesContent":["/**\n * @license Angular v20.3.2\n * (c) 2010-2025 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport * as i0 from '@angular/core';\nimport { Injectable, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpHeaders, HttpResponse, HttpErrorResponse, HttpStatusCode, HttpEventType, HttpBackend, REQUESTS_CONTRIBUTE_TO_STABILITY, HttpClientModule } from '../module.mjs';\nimport 'rxjs/operators';\nimport '../xhr.mjs';\n\n/**\n * Controller to be injected into tests, that allows for mocking and flushing\n * of requests.\n *\n * @publicApi\n */\nclass HttpTestingController {\n}\n\n/**\n * A mock requests that was received and is ready to be answered.\n *\n * This interface allows access to the underlying `HttpRequest`, and allows\n * responding with `HttpEvent`s or `HttpErrorResponse`s.\n *\n * @publicApi\n */\nclass TestRequest {\n    request;\n    observer;\n    /**\n     * Whether the request was cancelled after it was sent.\n     */\n    get cancelled() {\n        return this._cancelled;\n    }\n    /**\n     * @internal set by `HttpClientTestingBackend`\n     */\n    _cancelled = false;\n    constructor(request, observer) {\n        this.request = request;\n        this.observer = observer;\n    }\n    /**\n     * Resolve the request by returning a body plus additional HTTP information (such as response\n     * headers) if provided.\n     * If the request specifies an expected body type, the body is converted into the requested type.\n     * Otherwise, the body is converted to `JSON` by default.\n     *\n     * Both successful and unsuccessful responses can be delivered via `flush()`.\n     */\n    flush(body, opts = {}) {\n        if (this.cancelled) {\n            throw new Error(`Cannot flush a cancelled request.`);\n        }\n        const url = this.request.urlWithParams;\n        const headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n        body = _maybeConvertBody(this.request.responseType, body);\n        let statusText = opts.statusText;\n        let status = opts.status !== undefined ? opts.status : HttpStatusCode.Ok;\n        if (opts.status === undefined) {\n            if (body === null) {\n                status = HttpStatusCode.NoContent;\n                statusText ||= 'No Content';\n            }\n            else {\n                statusText ||= 'OK';\n            }\n        }\n        if (statusText === undefined) {\n            throw new Error('statusText is required when setting a custom status.');\n        }\n        if (status >= 200 && status < 300) {\n            this.observer.next(new HttpResponse({ body, headers, status, statusText, url }));\n            this.observer.complete();\n        }\n        else {\n            this.observer.error(new HttpErrorResponse({ error: body, headers, status, statusText, url }));\n        }\n    }\n    error(error, opts = {}) {\n        if (this.cancelled) {\n            throw new Error(`Cannot return an error for a cancelled request.`);\n        }\n        const headers = opts.headers instanceof HttpHeaders ? opts.headers : new HttpHeaders(opts.headers);\n        this.observer.error(new HttpErrorResponse({\n            error,\n            headers,\n            status: opts.status || 0,\n            statusText: opts.statusText || '',\n            url: this.request.urlWithParams,\n        }));\n    }\n    /**\n     * Deliver an arbitrary `HttpEvent` (such as a progress event) on the response stream for this\n     * request.\n     */\n    event(event) {\n        if (this.cancelled) {\n            throw new Error(`Cannot send events to a cancelled request.`);\n        }\n        this.observer.next(event);\n    }\n}\n/**\n * Helper function to convert a response body to an ArrayBuffer.\n */\nfunction _toArrayBufferBody(body) {\n    if (typeof ArrayBuffer === 'undefined') {\n        throw new Error('ArrayBuffer responses are not supported on this platform.');\n    }\n    if (body instanceof ArrayBuffer) {\n        return body;\n    }\n    throw new Error('Automatic conversion to ArrayBuffer is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to a Blob.\n */\nfunction _toBlob(body) {\n    if (typeof Blob === 'undefined') {\n        throw new Error('Blob responses are not supported on this platform.');\n    }\n    if (body instanceof Blob) {\n        return body;\n    }\n    if (ArrayBuffer && body instanceof ArrayBuffer) {\n        return new Blob([body]);\n    }\n    throw new Error('Automatic conversion to Blob is not supported for response type.');\n}\n/**\n * Helper function to convert a response body to JSON data.\n */\nfunction _toJsonBody(body, format = 'JSON') {\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error(`Automatic conversion to ${format} is not supported for ArrayBuffers.`);\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error(`Automatic conversion to ${format} is not supported for Blobs.`);\n    }\n    if (typeof body === 'string' ||\n        typeof body === 'number' ||\n        typeof body === 'object' ||\n        typeof body === 'boolean' ||\n        Array.isArray(body)) {\n        return body;\n    }\n    throw new Error(`Automatic conversion to ${format} is not supported for response type.`);\n}\n/**\n * Helper function to convert a response body to a string.\n */\nfunction _toTextBody(body) {\n    if (typeof body === 'string') {\n        return body;\n    }\n    if (typeof ArrayBuffer !== 'undefined' && body instanceof ArrayBuffer) {\n        throw new Error('Automatic conversion to text is not supported for ArrayBuffers.');\n    }\n    if (typeof Blob !== 'undefined' && body instanceof Blob) {\n        throw new Error('Automatic conversion to text is not supported for Blobs.');\n    }\n    return JSON.stringify(_toJsonBody(body, 'text'));\n}\n/**\n * Convert a response body to the requested type.\n */\nfunction _maybeConvertBody(responseType, body) {\n    if (body === null) {\n        return null;\n    }\n    switch (responseType) {\n        case 'arraybuffer':\n            return _toArrayBufferBody(body);\n        case 'blob':\n            return _toBlob(body);\n        case 'json':\n            return _toJsonBody(body);\n        case 'text':\n            return _toTextBody(body);\n        default:\n            throw new Error(`Unsupported responseType: ${responseType}`);\n    }\n}\n\n/**\n * A testing backend for `HttpClient` which both acts as an `HttpBackend`\n * and as the `HttpTestingController`.\n *\n * `HttpClientTestingBackend` works by keeping a list of all open requests.\n * As requests come in, they're added to the list. Users can assert that specific\n * requests were made and then flush them. In the end, a verify() method asserts\n * that no unexpected requests were made.\n *\n *\n */\nclass HttpClientTestingBackend {\n    /**\n     * List of pending requests which have not yet been expected.\n     */\n    open = [];\n    /**\n     * Used when checking if we need to throw the NOT_USING_FETCH_BACKEND_IN_SSR error\n     */\n    isTestingBackend = true;\n    /**\n     * Handle an incoming request by queueing it in the list of open requests.\n     */\n    handle(req) {\n        return new Observable((observer) => {\n            const testReq = new TestRequest(req, observer);\n            this.open.push(testReq);\n            observer.next({ type: HttpEventType.Sent });\n            return () => {\n                testReq._cancelled = true;\n            };\n        });\n    }\n    /**\n     * Helper function to search for requests in the list of open requests.\n     */\n    _match(match) {\n        if (typeof match === 'string') {\n            return this.open.filter((testReq) => testReq.request.urlWithParams === match);\n        }\n        else if (typeof match === 'function') {\n            return this.open.filter((testReq) => match(testReq.request));\n        }\n        else {\n            return this.open.filter((testReq) => (!match.method || testReq.request.method === match.method.toUpperCase()) &&\n                (!match.url || testReq.request.urlWithParams === match.url));\n        }\n    }\n    /**\n     * Search for requests in the list of open requests, and return all that match\n     * without asserting anything about the number of matches.\n     */\n    match(match) {\n        const results = this._match(match);\n        results.forEach((result) => {\n            const index = this.open.indexOf(result);\n            if (index !== -1) {\n                this.open.splice(index, 1);\n            }\n        });\n        return results;\n    }\n    /**\n     * Expect that a single outstanding request matches the given matcher, and return\n     * it.\n     *\n     * Requests returned through this API will no longer be in the list of open requests,\n     * and thus will not match twice.\n     */\n    expectOne(match, description) {\n        description ||= this.descriptionFromMatcher(match);\n        const matches = this.match(match);\n        if (matches.length > 1) {\n            throw new Error(`Expected one matching request for criteria \"${description}\", found ${matches.length} requests.`);\n        }\n        if (matches.length === 0) {\n            let message = `Expected one matching request for criteria \"${description}\", found none.`;\n            if (this.open.length > 0) {\n                // Show the methods and URLs of open requests in the error, for convenience.\n                const requests = this.open.map(describeRequest).join(', ');\n                message += ` Requests received are: ${requests}.`;\n            }\n            throw new Error(message);\n        }\n        return matches[0];\n    }\n    /**\n     * Expect that no outstanding requests match the given matcher, and throw an error\n     * if any do.\n     */\n    expectNone(match, description) {\n        description ||= this.descriptionFromMatcher(match);\n        const matches = this.match(match);\n        if (matches.length > 0) {\n            throw new Error(`Expected zero matching requests for criteria \"${description}\", found ${matches.length}.`);\n        }\n    }\n    /**\n     * Validate that there are no outstanding requests.\n     */\n    verify(opts = {}) {\n        let open = this.open;\n        // It's possible that some requests may be cancelled, and this is expected.\n        // The user can ask to ignore open requests which have been cancelled.\n        if (opts.ignoreCancelled) {\n            open = open.filter((testReq) => !testReq.cancelled);\n        }\n        if (open.length > 0) {\n            // Show the methods and URLs of open requests in the error, for convenience.\n            const requests = open.map(describeRequest).join(', ');\n            throw new Error(`Expected no open requests, found ${open.length}: ${requests}`);\n        }\n    }\n    descriptionFromMatcher(matcher) {\n        if (typeof matcher === 'string') {\n            return `Match URL: ${matcher}`;\n        }\n        else if (typeof matcher === 'object') {\n            const method = matcher.method || '(any)';\n            const url = matcher.url || '(any)';\n            return `Match method: ${method}, URL: ${url}`;\n        }\n        else {\n            return `Match by function: ${matcher.name}`;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.3.2\", ngImport: i0, type: HttpClientTestingBackend, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.3.2\", ngImport: i0, type: HttpClientTestingBackend });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.3.2\", ngImport: i0, type: HttpClientTestingBackend, decorators: [{\n            type: Injectable\n        }] });\nfunction describeRequest(testRequest) {\n    const url = testRequest.request.urlWithParams;\n    const method = testRequest.request.method;\n    return `${method} ${url}`;\n}\n\nfunction provideHttpClientTesting() {\n    return [\n        HttpClientTestingBackend,\n        { provide: HttpBackend, useExisting: HttpClientTestingBackend },\n        { provide: HttpTestingController, useExisting: HttpClientTestingBackend },\n        { provide: REQUESTS_CONTRIBUTE_TO_STABILITY, useValue: false },\n    ];\n}\n\n/**\n * Configures `HttpClientTestingBackend` as the `HttpBackend` used by `HttpClient`.\n *\n * Inject `HttpTestingController` to expect and flush requests in your tests.\n *\n * @publicApi\n *\n * @deprecated Add `provideHttpClientTesting()` to your providers instead.\n */\nclass HttpClientTestingModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.3.2\", ngImport: i0, type: HttpClientTestingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.3.2\", ngImport: i0, type: HttpClientTestingModule, imports: [HttpClientModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.3.2\", ngImport: i0, type: HttpClientTestingModule, providers: [provideHttpClientTesting()], imports: [HttpClientModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.3.2\", ngImport: i0, type: HttpClientTestingModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [HttpClientModule],\n                    providers: [provideHttpClientTesting()],\n                }]\n        }] });\n\nexport { HttpClientTestingModule, HttpTestingController, TestRequest, provideHttpClientTesting };\n\n","import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\r\nimport { TestBed } from '@angular/core/testing';\r\n\r\nimport { AdminService } from './admin.service';\r\nimport { ApiService } from './api.service';\r\n\r\ndescribe('AdminService', () => {\r\n  let service: AdminService;\r\n  let httpMock: HttpTestingController;\r\n  let api: ApiService;\r\n\r\n  beforeEach(() => {\r\n    TestBed.configureTestingModule({\r\n      imports: [HttpClientTestingModule],\r\n      providers: [AdminService, ApiService]\r\n    });\r\n\r\n    service = TestBed.inject(AdminService);\r\n    httpMock = TestBed.inject(HttpTestingController);\r\n    api = TestBed.inject(ApiService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    httpMock.verify();\r\n  });\r\n\r\n  it('should load trainings normalizing payload', () => {\r\n    const payload = {\r\n      items: [\r\n        {\r\n          id: 123,\r\n          title: 'Treinamento Integração',\r\n          publicationStatus: 'PUBLISHED',\r\n          description: 'Conteúdo',\r\n          entityType: 'EBOOK'\r\n        }\r\n      ]\r\n    };\r\n\r\n    let responseLength = 0;\r\n    service.getTrainings().subscribe(trainings => {\r\n      responseLength = trainings.length;\r\n      expect(trainings[0].id).toBe('123');\r\n      expect(trainings[0].title).toBe('Treinamento Integração');\r\n      expect(trainings[0].publicationStatus).toBe('PUBLISHED');\r\n    });\r\n\r\n    const req = httpMock.expectOne(api.createUrl('/admin/trainings'));\r\n    expect(req.request.method).toBe('GET');\r\n    req.flush(payload);\r\n\r\n    expect(responseLength).toBe(1);\r\n  });\r\n\r\n  it('should create training with payload and normalize response', () => {\r\n    const requestBody = {\r\n      title: 'Novo Curso',\r\n      description: 'Descrição',\r\n      entityType: 'RECORDED_COURSE'\r\n    };\r\n\r\n    service.createTraining(requestBody).subscribe(training => {\r\n      expect(training.id).toBe('course-1');\r\n      expect(training.title).toBe('Novo Curso');\r\n      expect(training.entityType).toBe('RECORDED_COURSE');\r\n    });\r\n\r\n    const req = httpMock.expectOne(api.createUrl('/admin/trainings'));\r\n    expect(req.request.method).toBe('POST');\r\n    expect(req.request.body).toEqual(requestBody);\r\n    req.flush({ id: 'course-1', ...requestBody });\r\n  });\r\n\r\n  it('should build ebook url with base path', () => {\r\n    const url = service.buildEbookFileUrl('ebook.pdf');\r\n    expect(url).toContain('/admin/ebooks/ebook.pdf');\r\n    expect(url?.startsWith('http')).toBeTrue();\r\n  });\r\n\r\n  it('should detect pdf metadata and extract file name', () => {\r\n    const training: any = {\r\n      title: 'E-book',\r\n      ebookFileUrl: 'https://example.com/uploads/ebook-prospera.pdf?token=abc'\r\n    };\r\n\r\n    expect(service.trainingHasPdf(training)).toBeTrue();\r\n    expect(service.extractPdfFileName(training)).toBe('ebook-prospera.pdf');\r\n  });\r\n});\r\n","import { HttpClient, HttpErrorResponse, HttpEventType, HttpRequest } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, catchError, filter, map, of, throwError } from 'rxjs';\r\n\r\nimport {\r\n  AdminSector,\r\n  AdminTraining,\r\n  AdminTrainingPayload,\r\n  AdminTrainingUpdatePayload,\r\n  AssignTrainingPayload,\r\n  EbookProgress,\r\n  EbookUploadEvent\r\n} from '../models/admin';\r\nimport { ApiService } from './api.service';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AdminService {\r\n  constructor(private readonly api: ApiService, private readonly http: HttpClient) {}\r\n\r\n  getSectors(): Observable<AdminSector[]> {\r\n    return this.api.get<unknown>('/admin/sectors').pipe(map(response => this.unwrapList<AdminSector>(response).map(this.normalizeSector)));\r\n  }\r\n\r\n  // --- Organizations (Admin) ---\r\n  getOrganizations(): Observable<any[]> {\r\n    return this.api.get<unknown>('/admin/organizations').pipe(\r\n      map(resp => this.unwrapList<any>(resp).map(o => this.normalizeOrganization(o)))\r\n    );\r\n  }\r\n\r\n  getOrganizationById(orgId: string): Observable<any> {\r\n    return this.api.get<unknown>(`/admin/organizations/${encodeURIComponent(orgId)}`).pipe(\r\n      map(resp => this.normalizeOrganization(resp))\r\n    );\r\n  }\r\n\r\n  updateOrganizationEnabled(orgId: string, enabled: boolean): Observable<any> {\r\n    const newStatus = enabled ? 'ACTIVE' : 'INACTIVE';\r\n    // endpoint principal conhecido (legacy)\r\n    return this.api.patch<any>(`/admin/organizations/${encodeURIComponent(orgId)}/status`, { newStatus }).pipe(\r\n      catchError(err => {\r\n        // fallback: PATCH direto com enabled (caso backend aceite)\r\n        if (err && (err.status === 400 || err.status === 404 || err.status === 405)) {\r\n          return this.api.patch<any>(`/admin/organizations/${encodeURIComponent(orgId)}`, { enabled });\r\n        }\r\n        return throwError(() => err);\r\n      })\r\n    );\r\n  }\r\n\r\n  // --- Users (Admin) ---\r\n  getUsers(): Observable<any[]> {\r\n    return this.api.get<unknown>('/admin/users').pipe(\r\n      map(resp => this.unwrapList<any>(resp).map(u => this.normalizeUser(u)))\r\n    );\r\n  }\r\n\r\n  getUserById(userId: string): Observable<any> {\r\n    return this.api.get<unknown>(`/admin/users/${encodeURIComponent(userId)}`).pipe(\r\n      map(resp => this.normalizeUser(resp))\r\n    );\r\n  }\r\n\r\n  updateUserEnabled(userId: string, enabled: boolean): Observable<any> {\r\n    // tenta endpoint canônico; se falhar com 400/404/405 poderemos futuramente tentar fallback /status\r\n    return this.api.patch<any>(`/admin/users/${encodeURIComponent(userId)}`, { enabled }).pipe(\r\n      catchError(err => {\r\n        // fallback opcional baseado no legacy\r\n        if (err && (err.status === 400 || err.status === 404 || err.status === 405)) {\r\n          const newStatus = enabled ? 'ACTIVE' : 'INACTIVE';\r\n          return this.api.patch<any>(`/admin/users/${encodeURIComponent(userId)}/status`, { newStatus });\r\n        }\r\n        return throwError(() => err);\r\n      })\r\n    );\r\n  }\r\n\r\n  createSector(name: string): Observable<AdminSector> {\r\n    return this.api\r\n      .post<AdminSector>('/admin/sectors', { name })\r\n      .pipe(map(this.normalizeSector));\r\n  }\r\n\r\n  deleteSector(id: string): Observable<void> {\r\n    return this.api.delete<void>(`/admin/sectors/${encodeURIComponent(id)}`).pipe(map(() => void 0));\r\n  }\r\n\r\n  getSectorById(id: string): Observable<AdminSector> {\r\n    return this.api\r\n      .get<AdminSector>(`/admin/sectors/${encodeURIComponent(id)}`)\r\n      .pipe(map(this.normalizeSector));\r\n  }\r\n\r\n  getTrainings(): Observable<AdminTraining[]> {\r\n    return this.api.get<unknown>('/admin/trainings').pipe(map(response => this.unwrapList<AdminTraining>(response).map(this.normalizeTraining)));\r\n  }\r\n\r\n  createTraining(payload: AdminTrainingPayload): Observable<AdminTraining> {\r\n    return this.api\r\n      .post<AdminTraining>('/admin/trainings', payload)\r\n      .pipe(map(this.normalizeTraining));\r\n  }\r\n\r\n  getTrainingById(id: string): Observable<AdminTraining> {\r\n    return this.api\r\n      .get<AdminTraining>(`/admin/trainings/${encodeURIComponent(id)}`)\r\n      .pipe(map(this.normalizeTraining));\r\n  }\r\n\r\n  updateTraining(id: string, changes: AdminTrainingUpdatePayload): Observable<AdminTraining> {\r\n    return this.api\r\n      .put<AdminTraining>(`/admin/trainings/${encodeURIComponent(id)}`, changes)\r\n      .pipe(map(this.normalizeTraining));\r\n  }\r\n\r\n  publishTraining(id: string): Observable<void> {\r\n    return this.api.post<void>(`/admin/trainings/${encodeURIComponent(id)}/publish`, {}).pipe(map(() => void 0));\r\n  }\r\n\r\n  deleteTraining(id: string): Observable<void> {\r\n    return this.api.delete<void>(`/admin/trainings/${encodeURIComponent(id)}`).pipe(map(() => void 0));\r\n  }\r\n\r\n  assignTrainingToSector(trainingId: string, assignment: AssignTrainingPayload): Observable<void> {\r\n    return this.api\r\n      .post<void>(`/admin/trainings/${encodeURIComponent(trainingId)}/sectors`, assignment)\r\n      .pipe(map(() => void 0));\r\n  }\r\n\r\n  unlinkTrainingSector(trainingId: string, sectorId: string): Observable<void> {\r\n    return this.api\r\n      .delete<void>(`/admin/trainings/${encodeURIComponent(trainingId)}/sectors/${encodeURIComponent(sectorId)}`)\r\n      .pipe(map(() => void 0));\r\n  }\r\n\r\n  orgUnfollowSector(orgId: string, sectorId: string): Observable<void> {\r\n    return this.api\r\n      .delete<void>(`/organizations/${encodeURIComponent(orgId)}/sectors/${encodeURIComponent(sectorId)}`)\r\n      .pipe(map(() => void 0));\r\n  }\r\n\r\n  uploadEbookFile(trainingId: string, file: File): Observable<unknown> {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    return this.api.post<unknown>(`/admin/trainings/ebooks/${encodeURIComponent(trainingId)}/upload`, formData);\r\n  }\r\n\r\n  uploadEbookFileWithProgress(trainingId: string, file: File): Observable<EbookUploadEvent> {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    const url = this.api.createUrl(`/admin/trainings/ebooks/${encodeURIComponent(trainingId)}/upload`);\r\n    const request = new HttpRequest('POST', url, formData, {\r\n      reportProgress: true\r\n    });\r\n    return this.http.request(request).pipe(\r\n      map(event => {\r\n        if (event.type === HttpEventType.UploadProgress) {\r\n          const progress = event.total ? Math.round((event.loaded / event.total) * 100) : 0;\r\n          return { type: 'progress', progress } as EbookUploadEvent;\r\n        }\r\n        if (event.type === HttpEventType.Response) {\r\n          return { type: 'response', body: event.body ?? null } as EbookUploadEvent;\r\n        }\r\n        return null;\r\n      }),\r\n      filter((event): event is EbookUploadEvent => event !== null),\r\n      catchError(error => {\r\n        const message = error instanceof HttpErrorResponse ? error.message || 'Falha no upload do e-book.' : 'Falha no upload do e-book.';\r\n        return throwError(() => new Error(message));\r\n      })\r\n    );\r\n  }\r\n\r\n  uploadTrainingCoverImage(trainingId: string, file: File): Observable<EbookUploadEvent> {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    const url = this.api.createUrl(`/admin/trainings/${encodeURIComponent(trainingId)}/cover-image`);\r\n    const request = new HttpRequest('POST', url, formData, { reportProgress: true });\r\n    return this.http.request(request).pipe(\r\n      map(event => {\r\n        if (event.type === HttpEventType.UploadProgress) {\r\n          const progress = event.total ? Math.round((event.loaded / event.total) * 100) : 0;\r\n            return { type: 'progress', progress } as EbookUploadEvent;\r\n        }\r\n        if (event.type === HttpEventType.Response) {\r\n          return { type: 'response', body: event.body ?? null } as EbookUploadEvent;\r\n        }\r\n        return null;\r\n      }),\r\n      filter((e): e is EbookUploadEvent => e !== null),\r\n      catchError(err => throwError(() => new Error(err?.message || 'Falha no upload da capa.')))\r\n    );\r\n  }\r\n\r\n  fetchEbookProgress(trainingId: string): Observable<EbookProgress | null> {\r\n    return this.api.get<EbookProgress>(`/progress/ebooks/${encodeURIComponent(trainingId)}`).pipe(\r\n      catchError(error => {\r\n        if (error instanceof HttpErrorResponse && error.status === 404) {\r\n          return of(null);\r\n        }\r\n        return throwError(() => error);\r\n      })\r\n    );\r\n  }\r\n\r\n  updateEbookProgress(trainingId: string, lastPageRead: number): Observable<void> {\r\n    return this.api\r\n      .put<void>(`/progress/ebooks/${encodeURIComponent(trainingId)}`, { lastPageRead })\r\n      .pipe(map(() => void 0));\r\n  }\r\n\r\n  buildEbookFileUrl(fileName: string | null | undefined): string | null {\r\n    if (!fileName) {\r\n      return null;\r\n    }\r\n    return this.api.createUrl(`/admin/ebooks/${encodeURIComponent(fileName)}`);\r\n  }\r\n\r\n  /**\r\n   * Verifica se há PDF disponível seguindo a mesma heurística robusta do legacy:\r\n   * 1. Flags booleanas conhecidas (hasPdf, pdfUploaded, ebookFileUploaded, fileUploaded)\r\n   * 2. Conjunto de chaves de caminho/URL que terminem em .pdf\r\n   * 3. ebookDetails.filePath\r\n   * 4. Busca rasa (profundidade 1) por qualquer string terminando em .pdf\r\n   */\r\n  trainingHasPdf(training: AdminTraining | Record<string, unknown> | null | undefined): boolean {\r\n    return this.trainingPdfDebug(training).has;\r\n  }\r\n\r\n  /**\r\n   * Método de diagnóstico que explica COMO o PDF foi (ou não) detectado.\r\n   * Retorna a primeira correspondência encontrada para facilitar debug.\r\n   * Utilize no console: adminService.trainingPdfDebug(obj)\r\n   */\r\n  trainingPdfDebug(training: AdminTraining | Record<string, unknown> | null | undefined): { has: boolean; matchedBy: string; key?: string; valueSample?: string; path?: string } {\r\n    if (!training) return { has: false, matchedBy: 'no-training' };\r\n    const visited = new Set<any>();\r\n    const anyT = training as any;\r\n\r\n    const looksLikePdf = (raw: unknown): raw is string => {\r\n      if (typeof raw !== 'string') return false;\r\n      const trimmed = raw.trim();\r\n      // Normalização simples para casos com espaços finais ou parâmetros de query\r\n      const base = trimmed.split('?')[0].trim().toLowerCase();\r\n      if (base.endsWith('.pdf')) return true;\r\n      // regex original (cobre casos com ?query)\r\n      if (/\\.pdf($|\\?)/i.test(trimmed)) return true;\r\n      return false;\r\n    };\r\n\r\n    // 1. Flags booleanas óbvias\r\n    const booleanFlags = ['hasPdf','pdfUploaded','ebookFileUploaded','fileUploaded'];\r\n    for (const flag of booleanFlags) {\r\n      if (anyT && anyT[flag]) {\r\n        return { has: true, matchedBy: 'boolean-flag', key: flag, valueSample: String(anyT[flag]) };\r\n      }\r\n    }\r\n\r\n    // 2. ebookDetails prioritário\r\n    const ed = anyT.ebookDetails;\r\n    if (ed && typeof ed === 'object') {\r\n      const edPaths = [ed.filePath, ed.file, ed.filepath, ed.pdfFilePath, ed.pdfPath, ed.url, ed.fileUrl, ed.name, ed.filename, ed.originalName];\r\n      const match = edPaths.find(v => looksLikePdf(v));\r\n      if (match) {\r\n        return { has: true, matchedBy: 'ebookDetails', key: 'ebookDetails.*', valueSample: String(match) };\r\n      }\r\n    }\r\n\r\n    // 3. Chaves diretas ampliadas\r\n    const pathKeys = [\r\n      'filePath','filepath','file','pdfPath','pdfFilePath','pdfFile',\r\n      'ebookFile','ebookFilePath','ebookPath','ebookPdfPath',\r\n      'ebookFileUrl','fileUrl','pdfUrl','pdf','ebookUrl',\r\n      'ebook','document','documentPath','resourcePath','resourceUrl',\r\n      'pdfFileName','ebookFileName','filename','name','originalName'\r\n    ];\r\n    for (const k of pathKeys) {\r\n      const v = anyT[k];\r\n      if (looksLikePdf(v)) {\r\n        return { has: true, matchedBy: 'direct-key', key: k, valueSample: String(v) };\r\n      }\r\n    }\r\n\r\n    // 4. Busca profunda (objetos + arrays) – BFS limitada por profundidade e número de nós\r\n    interface QueueItem { value: any; depth: number; path: string; }\r\n    const queue: QueueItem[] = [{ value: anyT, depth: 0, path: 'root' }];\r\n    const MAX_DEPTH = 5;\r\n    const MAX_NODES = 500; // protecção contra loops ou objetos gigantes\r\n    let processed = 0;\r\n\r\n    while (queue.length) {\r\n      const current = queue.shift()!;\r\n      const { value, depth, path } = current;\r\n      if (!value || typeof value !== 'object') continue;\r\n      if (visited.has(value)) continue;\r\n      visited.add(value);\r\n      processed++;\r\n      if (processed > MAX_NODES) break;\r\n\r\n      const entries = Array.isArray(value) ? value.map((v, i) => [String(i), v]) : Object.entries(value);\r\n      for (const [k, v] of entries) {\r\n        if (looksLikePdf(v)) {\r\n          return { has: true, matchedBy: 'deep-scan', key: k, valueSample: String(v), path: path + '.' + k };\r\n        }\r\n        // Alguns backends enviam objetos de arquivo { name: 'x.pdf', url: '...' }\r\n        if (v && typeof v === 'object' && !Array.isArray(v)) {\r\n          const nameLike = (v as any).name || (v as any).fileName || (v as any).filename || (v as any).originalName;\r\n          const urlLike = (v as any).url || (v as any).fileUrl;\r\n            if (looksLikePdf(nameLike)) {\r\n              return { has: true, matchedBy: 'deep-file-object-name', key: k, valueSample: String(nameLike), path: path + '.' + k };\r\n            }\r\n            if (looksLikePdf(urlLike)) {\r\n              return { has: true, matchedBy: 'deep-file-object-url', key: k, valueSample: String(urlLike), path: path + '.' + k };\r\n            }\r\n        }\r\n        if (v && typeof v === 'object' && depth < MAX_DEPTH) {\r\n          queue.push({ value: v, depth: depth + 1, path: path + '.' + k });\r\n        }\r\n      }\r\n    }\r\n\r\n    return { has: false, matchedBy: 'not-found' };\r\n  }\r\n\r\n  extractPdfFileName(training: AdminTraining | Record<string, unknown> | null | undefined): string {\r\n    if (!training) {\r\n      return '';\r\n    }\r\n    const looksLikePdf = (raw: unknown): raw is string => {\r\n      if (typeof raw !== 'string') return false;\r\n      const trimmed = raw.trim();\r\n      const base = trimmed.split('?')[0].trim().toLowerCase();\r\n      if (base.endsWith('.pdf')) return true;\r\n      if (/\\.pdf($|\\?)/i.test(trimmed)) return true;\r\n      return false;\r\n    };\r\n    const pathKeys = [\r\n      'filePath',\r\n      'filepath',\r\n      'file',\r\n      'pdfPath',\r\n      'pdfFilePath',\r\n      'pdfFile',\r\n      'ebookFile',\r\n      'ebookFilePath',\r\n      'ebookPath',\r\n      'ebookPdfPath',\r\n      'ebookFileUrl',\r\n      'fileUrl',\r\n      'pdfUrl',\r\n      'pdf',\r\n      'ebookUrl'\r\n    ];\r\n    for (const key of pathKeys) {\r\n      const value = (training as any)[key];\r\n      if (looksLikePdf(value)) {\r\n        try {\r\n          return decodeURIComponent(value.split('/').pop()!.split('?')[0]);\r\n        } catch {\r\n          return value.split('/').pop() ?? '';\r\n        }\r\n      }\r\n    }\r\n    // fallback: ebookDetails\r\n    const ed: any = (training as any).ebookDetails;\r\n    if (ed && looksLikePdf(ed.filePath)) {\r\n      try {\r\n        return decodeURIComponent(ed.filePath.split('/').pop()!.split('?')[0]);\r\n      } catch {\r\n        return ed.filePath.split('/').pop() ?? '';\r\n      }\r\n    }\r\n    return '';\r\n  }\r\n\r\n  extractPdfUpdatedDate(training: AdminTraining | Record<string, unknown> | null | undefined): Date | null {\r\n    if (!training) {\r\n      return null;\r\n    }\r\n    const dateKeys = [\r\n      'pdfUpdatedAt',\r\n      'fileUpdatedAt',\r\n      'ebookUpdatedAt',\r\n      'ebookFileUpdatedAt',\r\n      'updatedAt',\r\n      'lastUpdatedAt',\r\n      'modifiedAt',\r\n      'fileModifiedAt'\r\n    ];\r\n    for (const key of dateKeys) {\r\n      const value = (training as any)[key];\r\n      if (value && (typeof value === 'string' || typeof value === 'number')) {\r\n        const parsed = new Date(value);\r\n        if (!isNaN(parsed.getTime())) {\r\n          return parsed;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private normalizeTraining = (raw: AdminTraining | Record<string, unknown> | undefined): AdminTraining => {\r\n    const source = raw ?? {};\r\n    const id = this.normalizeId(source);\r\n    return {\r\n      id,\r\n      title: String((source as any).title ?? (source as any).name ?? 'Treinamento'),\r\n      description: (source as any).description ?? null,\r\n      author: (source as any).author ?? null,\r\n      entityType: ((source as any).entityType ?? (source as any).format ?? (source as any).type) ?? null,\r\n      publicationStatus: (source as any).publicationStatus ?? (source as any).status ?? null,\r\n      coverImageUrl: (source as any).coverImageUrl ?? (source as any).imageUrl ?? null,\r\n      organizationId: (source as any).organizationId ?? null,\r\n      updatedAt: (source as any).updatedAt ?? null,\r\n      ...source\r\n    } as AdminTraining;\r\n  };\r\n\r\n  // --- Monetização: Planos & Assinaturas ---\r\n  /**\r\n   * Cria um novo plano de assinatura.\r\n   * O backend (exemplo fornecido) mostra os preços como strings (\"19.90\").\r\n   * Enviamos como string para preservar precisão e formato decimal esperado.\r\n   */\r\n  createPlan(payload: { name: string; description: string; originalPrice: string; currentPrice: string; durationInDays: number }): Observable<any> {\r\n    // Sanitização mínima: trim e corte de descrição (máx 512 chars conforme requisito)\r\n    const body = {\r\n      name: (payload.name || '').trim(),\r\n      description: (payload.description || '').trim().slice(0, 512),\r\n      originalPrice: (payload.originalPrice || '').trim(),\r\n      currentPrice: (payload.currentPrice || '').trim(),\r\n      durationInDays: Number(payload.durationInDays) || 0\r\n    };\r\n    return this.api.post<any>('/admin/plans', body);\r\n  }\r\n\r\n  /**\r\n   * Cria manualmente uma assinatura para um usuário.\r\n   */\r\n  createSubscription(payload: { userId: string; planId: string }): Observable<any> {\r\n    const body = { userId: (payload.userId || '').trim(), planId: (payload.planId || '').trim() };\r\n    return this.api.post<any>('/admin/subscriptions', body);\r\n  }\r\n\r\n  private normalizeSector = (raw: AdminSector | Record<string, unknown> | undefined): AdminSector => {\r\n    const source = raw ?? {};\r\n    const id = this.normalizeId(source);\r\n    return {\r\n      id,\r\n      name: String((source as any).name ?? (source as any).title ?? (source as any).label ?? 'Setor'),\r\n      ...source\r\n    } as AdminSector;\r\n  };\r\n\r\n  private normalizeId(raw: Record<string, unknown>): string {\r\n    const candidate = raw['id'] ?? (raw as any).uuid ?? (raw as any).code ?? (raw as any).slug ?? (raw as any).trainingId;\r\n    if (candidate != null) {\r\n      return String(candidate);\r\n    }\r\n    return `admin-${Math.random().toString(36).slice(2, 11)}`;\r\n  }\r\n\r\n  private unwrapList<T>(response: unknown): T[] {\r\n    if (Array.isArray(response)) {\r\n      return response as T[];\r\n    }\r\n    if (response && typeof response === 'object') {\r\n      const collection = (response as any).items ?? (response as any).data ?? (response as any).content;\r\n      if (Array.isArray(collection)) {\r\n        return collection as T[];\r\n      }\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private normalizeUser(raw: any): any {\r\n    if (!raw) return { id: '', email: '', enabled: false };\r\n    const id = String(raw.id ?? raw.userId ?? raw._id ?? '');\r\n    const email = String(raw.email ?? raw.userEmail ?? '');\r\n    const role = raw.role ?? raw.systemRole ?? null;\r\n    const enabled = raw.enabled === false ? false : true;\r\n    return { id, email, role, enabled, ...raw };\r\n  }\r\n\r\n  private normalizeOrganization(raw: any): any {\r\n    const src = raw || {};\r\n    const id = String(src.id ?? src.orgId ?? src._id ?? '');\r\n    const name = String(src.razaoSocial ?? src.companyName ?? src.name ?? src.title ?? '');\r\n    const cnpj = src.cnpj ?? src.CNPJ ?? null;\r\n    let enabled: boolean;\r\n    if (src.enabled === true) enabled = true; else if (src.enabled === false) enabled = false; else if (typeof src.status === 'string') {\r\n      const st = src.status.toLowerCase(); enabled = (st === 'active' || st === 'enabled' || st === 'true');\r\n    } else if (typeof src.active === 'boolean') enabled = src.active; else if (typeof src.state === 'string') {\r\n      const st = src.state.toLowerCase(); enabled = (st === 'active' || st === 'enabled');\r\n    } else enabled = true;\r\n    const memberCount = typeof src.memberCount === 'number' ? src.memberCount : (Array.isArray(src.members) ? src.members.length : undefined);\r\n    return { id, name, cnpj, enabled, memberCount, ...src };\r\n  }\r\n\r\n  private searchPdfInNested(obj: Record<string, unknown> | AdminTraining, depth = 0): boolean {\r\n    if (!obj || depth > 1) {\r\n      return false;\r\n    }\r\n    for (const value of Object.values(obj)) {\r\n      if (typeof value === 'string' && /\\.pdf($|\\?)/i.test(value)) {\r\n        return true;\r\n      }\r\n      if (value && typeof value === 'object' && !Array.isArray(value)) {\r\n        if (this.searchPdfInNested(value as Record<string, unknown>, depth + 1)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n}\r\n"],"mappings":"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","names":["AdminService"],"x_google_ignoreList":[0]}