{
  "version": 3,
  "sources": ["src/app/core/services/auth.service.spec.ts"],
  "sourcesContent": ["import { TestBed } from '@angular/core/testing';\r\nimport { Router } from '@angular/router';\r\nimport { firstValueFrom, of, throwError } from 'rxjs';\r\nimport { filter, take } from 'rxjs/operators';\r\n\r\nimport { ApiService } from './api.service';\r\nimport { AuthService } from './auth.service';\r\nimport { UserProfile } from '../models/user';\r\n\r\ndescribe('AuthService', () => {\r\n  let service: AuthService;\r\n  let apiService: jasmine.SpyObj<ApiService>;\r\n  let router: jasmine.SpyObj<Router>;\r\n\r\n  beforeEach(() => {\r\n    apiService = jasmine.createSpyObj<ApiService>('ApiService', ['get', 'post', 'patch']);\r\n    router = jasmine.createSpyObj<Router>('Router', ['navigate']);\r\n\r\n    window.localStorage.clear();\r\n\r\n    TestBed.configureTestingModule({\r\n      providers: [\r\n        AuthService,\r\n        { provide: ApiService, useValue: apiService },\r\n        { provide: Router, useValue: router }\r\n      ]\r\n    });\r\n\r\n    service = TestBed.inject(AuthService);\r\n  });\r\n\r\n  afterEach(() => {\r\n    window.localStorage.clear();\r\n  });\r\n\r\n  it('persiste token e emite usuário quando login retorna perfil', async () => {\r\n    const profile: UserProfile = { id: '1', email: 'ana@empresa.com', name: 'Ana' };\r\n  apiService.post.and.returnValue(of({ token: 'jwt-token', email: profile.email, profile }));\r\n\r\n    const result = await firstValueFrom(service.login({ email: 'ana@empresa.com', password: '123456' }));\r\n\r\n    expect(result.email).toBe('ana@empresa.com');\r\n    expect(apiService.post).toHaveBeenCalledWith('/auth/login', { email: 'ana@empresa.com', password: '123456' }, { withCredentials: true });\r\n    expect(window.localStorage.getItem('jwtToken')).toBe('jwt-token');\r\n  expect(window.localStorage.getItem('loggedInUserEmail')).toBe('ana@empresa.com');\r\n\r\n  const emitted = await firstValueFrom(service.user$.pipe(filter(Boolean), take(1)));\r\n    expect(emitted?.name).toBe('Ana');\r\n  });\r\n\r\n  it('faz logout limpando sessão e redirecionando para / (home)', async () => {\r\n  apiService.post.and.returnValue(of({ token: 'token', email: 'ana@empresa.com', profile: { email: 'ana@empresa.com' } }));\r\n    await firstValueFrom(service.login({ email: 'ana@empresa.com', password: '123456' }));\r\n\r\n  const removeSpy = spyOn(window.localStorage, 'removeItem').and.callThrough();\r\n\r\n  service.logout();\r\n\r\n  expect(removeSpy).toHaveBeenCalledWith('jwtToken');\r\n  expect(router.navigate).toHaveBeenCalledWith(['/']);\r\n  expect(service.isAuthenticated()).toBeFalse();\r\n  });\r\n\r\n  it('falha ao buscar perfil quando não há token', async () => {\r\n    await expectAsync(firstValueFrom(service.fetchProfile())).toBeRejectedWithError('Token ausente.');\r\n    expect(router.navigate).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('limpa sessão e navega ao falhar em buscar perfil com token', async () => {\r\n    window.localStorage.setItem('jwtToken', 'token');\r\n    apiService.get.and.returnValue(throwError(() => new Error('fail')));\r\n\r\n    await expectAsync(firstValueFrom(service.fetchProfile())).toBeRejected();\r\n  expect(router.navigate).toHaveBeenCalledWith(['/']);\r\n    expect(window.localStorage.getItem('jwtToken')).toBeNull();\r\n  });\r\n\r\n  it('atualiza perfil preservando e-mail armazenado', async () => {\r\n    const profile: UserProfile = { id: '1', email: 'ana@empresa.com', name: 'Ana' };\r\n    apiService.post.and.returnValue(of({ token: 'token', profile }));\r\n    await firstValueFrom(service.login({ email: 'ana@empresa.com', password: '123456' }));\r\n\r\n    apiService.patch.and.returnValue(of({ id: '1', name: 'Ana Carolina' } as UserProfile));\r\n\r\n    const updated = await firstValueFrom(service.updateProfile({ name: 'Ana Carolina' }));\r\n    expect(updated.name).toBe('Ana Carolina');\r\n\r\n    const state = (service as any).userSubject.value as UserProfile | null;\r\n    expect(state?.email).toBe('ana@empresa.com');\r\n    expect(state?.name).toBe('Ana Carolina');\r\n  });\r\n});\r\n"],
  "mappings": "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",
  "names": []
}
